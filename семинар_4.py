# -*- coding: utf-8 -*-
"""семинар 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EiW1y7RvuIYN3-dQvhKglu_6qUgilynR
"""

import requests

salary=lambda x: [x['salary']['from'],x['salary']['to'],x['salary']['currency'],x['salary']['gross']] if x['salary'] is not None else [None]*4
snippet=lambda x: [x['snippet']['responsibility'],x['snippet']['requirement']] if ['snippet'] is not None else [None]*2

vac = []

for i in range(10):
  url='https://api.hh.ru/vacancies?text=Программист&per_page=100&area=1&area=2&page={}'.format(str(i))
  vac+=[[x['id'],x['name']]+salary(x)+[x['employer']['name']]+[x['area']['name']]+snippet(x) for x in requests.get(url).json()['items']]

"""1. Создать фукнцию get_salary извлечения средней зарплаты из вакансии по from и to, выводить None если значение ключа salary пусток, очистку от налога и валюты не делать
2. Создать декоратор clean_salary, вычитающий налог НДФЛ (13%) если ключ gross в ключе salary равен True

x['from'] x['to'] x['gross']
"""

def get_salary(vac):
  if vac[2] is not None:
    if vac[3] is None:
      return vac[2]
    else:
      return (vac[2]+vac[3])/2
  else:
    return None

def clean_salary(x):
  if (get_salary(x) is not None) and (x['gross'] is True):
    return get_salary(x)*0.87
  elif (get_salary(x) is not None) and (vac['gross'] is False):
    return get_salary(x)
  else:
    return x

def clean_salary(fn):
  def cleaning(x):
    result = fn(x)
    if x is not None and x['gross'] is True:
      return result*0.87
    else:
      return result
  return cleaning

@clean_salary
def get_salary(x):
  if x is not None:
    if(x['from'] is not None) and (x['to'] is not None):
      return ((x['from']+x['to'])/2)
    elif (x['from'] is not None):
      return x['from']
    else:
      return x['to']
  else:
    return x

"""1. Создать класс VacancyList, состоящий из полей area, id, name, salary, gross. Поле area содержит список названий регионов публакаций вакансий, id - список id вакансий, name - список названий вакансий, salary - список средних зарплат, gross - список из Trye, если зарплата указывалась без налогв и False в противном случае
2. Определить метод fill(area=1,text='Программист'), заполнябщий объект этого класса 100 вакансиями из региона с кодом area, и текстом, содержащим text.
3. Определить метод max_vacany(), выдающий на экран название вакансии с максимальной зарплатой
4. Создать объект класса VacancyList, заполнить его вакансиями, вывести вакансию с максимальной зарплатой


Вакансии брать с api HH
http : //api.hh.ru/vacancies?.....
"""

class VacancyList(object):
  def __init__(self):
    self.area = None
    self.id = None
    self.name = None
    self.salary = None
    self.gross = None

  def fill(self, area = 1, text = "Программист"):
   import requests
   url='http://api.hh.ru/vacancies?text='+text+'&area='+str(area)+'&per_page=100'
   js=requests.get(url).json()['items']
   self.area = [x['area']['name'] for x in js]
   self.id = [x['id'] for x in js]
   self.name = [x['name'] for x in js]
   self.salary = [get_salary(x['salary']) for x in js ]
   self.gross = [x['salary']['gross']  if x['salary'] is not None else None for x in js]

  def max_vacancy(self):
   print(self.name[self.salary.index(max(x for x in self.salary if x is not None))])

vacancies=VacancyList()
vacancies.fill()

vacancies.max_vacancy()

"""Создать класс VacancyList_M1 на основе исходного VacancyList, и перегрузить для него оператор getitem так, чтобы по обращению с объектом по индексу возвращался котеж из area, id, name, salary"""

class VacancyList_M1(VacancyList):

  def __getitem__(self, index):
    return (self.area[index], self.id[index], self.name[index], self.salary[index])

vacancies1=VacancyList_M1()
vacancies1.fill()
vacancies1[5]

"""Сделать функцию получения списка вакансий по 100 штук, по заданному коду area и названию text. Сделать декоратор с помощью wraps, позволяющую вызвать эту функцию 5 раз

"""

from functools import wraps

def repeat(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    result = []
    for i in range(5):
      result = result + func(i)
    return result
  return wrapper




@repeat
def get_vacancies(i = 0, text = "Программист",area = 1):
  import requests
  url = 'http://api.hh.ru/vacancies?text=' + text + '&area=' + str(area) + '&per_page=100'+'&page=' + str(i)
  js = requests.get(url).json()['items']
  return js

js=get_vacancies()
len(set([x['id']for x in js]))